<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dongnao.workbench.accountflow.dao.AccountFlowMapper">
	<resultMap id="BaseResultMap" type="com.dongnao.workbench.accountflow.model.AccountFlow">
		<id column="id" property="id" jdbcType="VARCHAR" />
		<result column="account_id" property="accountId" jdbcType="VARCHAR" />
		<result column="account_no" property="accountNo" jdbcType="VARCHAR" />
		<result column="account_type" property="accountType" jdbcType="INTEGER" />
		<result column="account_name" property="accountName" jdbcType="VARCHAR" />
		<result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
		<result column="money" property="money" jdbcType="DOUBLE" />
		<result column="note" property="note" jdbcType="VARCHAR" />
		<result column="is_account" property="isAccount" jdbcType="INTEGER" />
		<result column="stu_id" property="stuId" jdbcType="VARCHAR" />
		<result column="emp_id" property="empId" jdbcType="VARCHAR" />
	</resultMap>
	<resultMap id="MoneyResultMap" type="com.dongnao.workbench.common.bean.ResultMoney">
		<result column="lend" property="lend"/>
		<result column="loan" property="loan"/>
		<result column="total" property="total"/>
	</resultMap>
	<sql id="Base_Column_List">
			 	id
				,account_id
				,account_no
				,account_type
				,account_name
				,create_date
				,money
				,note
				,is_account
				,stu_id
				,emp_id
	</sql>
	
	<select id="getByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from account_flow
		where id = #{id,jdbcType=VARCHAR}
	</select>
	
	<select id="listByCondition" resultMap="BaseResultMap" parameterType="com.dongnao.workbench.accountflow.model.AccountFlow">
		SELECT
			af.id,
			af.account_id,
			af.account_no,
			af.account_type,
			af.account_name,
			af.create_date,
			af.money,
			(
				CASE
				WHEN af.stu_id IS NOT NULL THEN
					CONCAT(v.NAME,"-",v.subject_name,"-",af.note)
				WHEN af.emp_id IS NOT NULL THEN
					CONCAT(bo.org_no,"-",e.nick_name,"-",af.note)
				ELSE
					af.note
				END
			) AS note,
			af.is_account,
			af.stu_id,
			v. NAME AS stuName,
			v.subject_name AS subjectName,
			v.course_name AS courseName
		FROM
			account_flow AS af
		LEFT JOIN vip_student AS v ON af.stu_id = v.id
		LEFT JOIN employee e on af.emp_id = e.id 
		LEFT join basic_org bo on e.dept_no = bo.org_no
		WHERE 1 = 1
		<if test="id != null and '' != id">  
			and af.id = #{id,jdbcType=VARCHAR}
		</if>
		<if test="accountId != null and '' != accountId">  
			and af.account_id = #{accountId,jdbcType=VARCHAR}
		</if>
		<if test="accountNo != null and '' != accountNo">  
			and af.account_no = #{accountNo,jdbcType=VARCHAR}
		</if>
		<if test="accountType != null and '' != accountType">  
			and af.account_type = #{accountType,jdbcType=INTEGER}
		</if>
		<if test="accountName != null and '' != accountName">  
			and af.account_name like CONCAT('%',#{accountName,jdbcType=VARCHAR},'%')
		</if>
		<if test="accountNameInclude != null and '' != accountNameInclude">  
			and af.account_name in(SUBSTRING(#{accountNameInclude,jdbcType=VARCHAR} FROM 1 FOR 4),SUBSTRING(#{accountNameInclude,jdbcType=VARCHAR} FROM 6 FOR 4))
		</if>
		<if test="accountNameExcept != null and '' != accountNameExcept">  
			and af.account_name not in (#{accountNameExcept,jdbcType=VARCHAR},'学费退款','学费调减')
		</if>
		<if test="null != propsMap.startDate and propsMap.startDate != ''">
			<![CDATA[
			and DATE_FORMAT(af.create_date,'%Y-%c-%d') >= DATE_FORMAT(#{propsMap.startDate,jdbcType=TIMESTAMP},'%Y-%c-%d')
			]]>
		</if>
		<if test="null != propsMap.endDate and propsMap.endDate != ''">
			<![CDATA[
				and DATE_FORMAT(af.create_date,'%Y-%c-%d') <= DATE_FORMAT(#{propsMap.endDate,jdbcType=TIMESTAMP},'%Y-%c-%d')
			]]>
		</if>
		<if test="money != null and '' != money">  
			and af.money = #{money,jdbcType=DOUBLE}
		</if>
		<if test="subjectName != null and '' != subjectName">  
			and v.subject_name = #{subjectName,jdbcType=VARCHAR}
		</if>
		<if test="note != null and '' != note">  
			and note like CONCAT('%',#{note,jdbcType=VARCHAR},'%')
		</if>
		<if test="isAccount != null and '' != isAccount">  
			and af.is_account = #{isAccount,jdbcType=INTEGER}
		</if>
		<if test="orderFields != null and '' != orderFields">  
           	order by ${orderFields} ${order}
		</if>
	</select>
	
	<delete id="deleteByKey" parameterType="java.lang.String">
		delete from account_flow
		where id = #{id,jdbcType=VARCHAR}
	</delete>
	
	<insert id="add" parameterType="com.dongnao.workbench.accountflow.model.AccountFlow">
		insert into account_flow (
		<include refid="Base_Column_List" />
		)values (
										#{id,jdbcType=VARCHAR}
										,#{accountId,jdbcType=VARCHAR}
										,#{accountNo,jdbcType=VARCHAR}
										,#{accountType,jdbcType=INTEGER}
										,#{accountName,jdbcType=VARCHAR}
										,#{createDate,jdbcType=TIMESTAMP}
										,#{money,jdbcType=DOUBLE}
										,#{note,jdbcType=VARCHAR}
										,#{isAccount,jdbcType=INTEGER}
										,#{stuId,jdbcType=VARCHAR}
										,#{empId,jdbcType=VARCHAR}
									)
	</insert>
	
	<update id="update" parameterType="com.dongnao.workbench.accountflow.model.AccountFlow">
		update account_flow  set
<!-- 											ID= #{id,jdbcType=VARCHAR} -->
<!-- 											,account_id = #{accountId,jdbcType=VARCHAR} -->
<!-- 											,account_no = #{accountNo,jdbcType=VARCHAR} -->
<!-- 											,account_type = #{accountType,jdbcType=INTEGER} -->
<!-- 											,account_name = #{accountName,jdbcType=VARCHAR} -->
<!-- 											,create_date = #{createDate,jdbcType=TIMESTAMP} -->
<!-- 											,money = #{money,jdbcType=DOUBLE} -->
<!-- 											,note = #{note,jdbcType=VARCHAR} -->
											,is_account=#{isAccount,jdbcType=INTEGER}
							where id = #{id,jdbcType=VARCHAR}
	</update>
	
	<select id="countMoney" resultMap="MoneyResultMap" parameterType="com.dongnao.workbench.accountflow.model.AccountFlow">
		select
		sum(case WHEN af.ACCOUNT_TYPE=1 THEN MONEY ELSE 0 END) AS LEND,
		sum(case WHEN af.ACCOUNT_TYPE=2 THEN MONEY ELSE 0 END) AS LOAN,
		sum(case WHEN af.ACCOUNT_TYPE=1 THEN MONEY ELSE 0 END)-SUM(CASE WHEN af.ACCOUNT_TYPE=2 THEN MONEY ELSE 0 END) AS TOTAL,
		sum(case WHEN af.ACCOUNT_NO='XFTK' THEN MONEY ELSE 0 END) AS XFTK
		from ACCOUNT_FLOW as af
		LEFT JOIN vip_student as v  ON	af.stu_id=v.id 
		where 1=1
		<if test="subjectName != null and '' != subjectName">  
			and v.subject_name = #{subjectName,jdbcType=VARCHAR}
		</if>
		<if test="accountName != null and '' != accountName">  
			and af.account_name like CONCAT('%',#{accountName,jdbcType=VARCHAR},'%')
		</if>
		<if test="accountNameInclude != null and '' != accountNameInclude">  
			and af.account_name in(SUBSTRING(#{accountNameInclude,jdbcType=VARCHAR} FROM 1 FOR 4),SUBSTRING(#{accountNameInclude,jdbcType=VARCHAR} FROM 6 FOR 4),SUBSTRING(#{accountNameInclude,jdbcType=VARCHAR} FROM 11 FOR 4))
		</if>
		<if test="accountNameExcept != null and '' != accountNameExcept">  
			and af.account_name not in (#{accountNameExcept,jdbcType=VARCHAR},'学费调减')
		</if>
		<if test="null != startDate and startDate != ''">
			<![CDATA[
			and DATE_FORMAT(af.create_date,'%Y-%c-%d') >= DATE_FORMAT(#{startDate,jdbcType=TIMESTAMP},'%Y-%c-%d')
			]]>
		</if>
		<if test="null != endDate and endDate != ''">
			<![CDATA[
				and DATE_FORMAT(af.create_date,'%Y-%c-%d') <= DATE_FORMAT(#{endDate,jdbcType=TIMESTAMP},'%Y-%c-%d')
			]]>
		</if>
	</select>
	
	<select id="countXF" resultMap="MoneyResultMap" parameterType="com.dongnao.workbench.accountflow.model.AccountFlow">
		select
		sum(case WHEN af.ACCOUNT_NO='XFSR' and af.money>0 THEN af.MONEY ELSE 0 END) AS xfsr,
		sum(case WHEN af.ACCOUNT_NO='XFBK' and af.money>0 THEN af.MONEY ELSE 0 END) AS xfbk,
		sum(case WHEN af.ACCOUNT_NO='XFTK' and af.money>0 THEN af.MONEY ELSE 0 END) AS xftk,
		sum(case WHEN af.ACCOUNT_NO='XFTZ' and af.money>0 THEN af.MONEY ELSE 0 END) AS xftz,
		sum(case WHEN af.ACCOUNT_NO='XFTJ' and af.money>0 THEN af.MONEY ELSE 0 END) AS xftj,
		sum(case WHEN af.ACCOUNT_NO='QTSR' and af.money>0 THEN af.MONEY ELSE 0 END) AS qtsr,
		sum(case WHEN af.ACCOUNT_NO='QT' and af.money>0 THEN af.MONEY ELSE 0 END) AS qtzc,
		sum(case WHEN af.account_type='1' and af.money>0 THEN af.MONEY ELSE 0 END)-sum(case WHEN af.account_type='2' and af.money>0 THEN af.MONEY ELSE 0 END) AS profit,
		sum(case WHEN af.account_type='2' and af.money>0 THEN af.MONEY ELSE 0 END)-sum(case WHEN af.ACCOUNT_NO='XFTK' and af.money>0 THEN af.MONEY ELSE 0 END)AS pay
		from ACCOUNT_FLOW af
		LEFT JOIN vip_student as v  ON	af.stu_id=v.id 
		where 1=1
		<if test="createTime!=null and createTime!=''"> 
			AND DATE_FORMAT(create_date,'%Y%c') like CONCAT('%',#{createTime,jdbcType=VARCHAR},'%')
		</if>
		<if test="subjectName != null and '' != subjectName">  
			and v.subject_id = #{subjectName,jdbcType=VARCHAR}
		</if>
		<if test="accountName != null and '' != accountName">  
			and af.account_name like CONCAT('%',#{accountName,jdbcType=VARCHAR},'%')
		</if>
		<if test="accountNameInclude != null and '' != accountNameInclude">  
			and af.account_name in(SUBSTRING(#{accountNameInclude,jdbcType=VARCHAR} FROM 1 FOR 4),SUBSTRING(#{accountNameInclude,jdbcType=VARCHAR} FROM 6 FOR 4),SUBSTRING(#{accountNameInclude,jdbcType=VARCHAR} FROM 11 FOR 4))
		</if>
		<if test="accountNameExcept != null and '' != accountNameExcept">  
			and af.account_name not in (#{accountNameExcept,jdbcType=VARCHAR},'学费调减')
		</if>
	</select>
	
	<select id="getBarStatistic" resultMap="MoneyResultMap" parameterType="com.dongnao.workbench.accountflow.model.AccountFlow">
		select
		sum(case WHEN a.ACCOUNT_NO='XFSR' and money>0 THEN MONEY ELSE 0 END) AS xfsr,
		sum(case WHEN a.ACCOUNT_NO='XFBK' and money>0 THEN MONEY ELSE 0 END) AS xfbk,
		sum(case WHEN a.ACCOUNT_NO='XFTK' and money>0 THEN MONEY ELSE 0 END) AS xftk,
		sum(case WHEN a.account_type='1' and money>0 THEN MONEY ELSE 0 END)-sum(case WHEN a.account_type='2' and money>0 THEN MONEY ELSE 0 END) AS profit,
		sum(case WHEN a.account_type='2' and money>0 THEN MONEY ELSE 0 END)-sum(case WHEN a.ACCOUNT_NO='XFTK' and money>0 THEN MONEY ELSE 0 END)AS pay		
		from (
			SELECT
				af.account_no,
				af.account_type,
				af.create_date,
				af.money,
				af.stu_id,
				v.subject_name AS subjectName
			FROM
				account_flow AS af
			LEFT JOIN vip_student AS v ON af.stu_id = v.id
			where 1=1
			<if test="null!=subjectName and ''!=subjectName"> 
				and v.subject_name = #{subjectName,jdbcType=VARCHAR}
			</if>
			<if test="null!=createTime and ''!=createTime"> 
				AND DATE_FORMAT(af.create_date,'%Y%c') like CONCAT('%',#{createTime,jdbcType=VARCHAR},'%')
			</if>
		) a
	</select>
	
	<select id="listByAccountName" resultMap="BaseResultMap" parameterType="java.lang.String">
		SELECT account_name ,sum(money)  as money
		  FROM account_flow 
		  where 1=1
		 	<if test="_parameter!=null and _parameter!=''"> 
				AND DATE_FORMAT(create_date,'%Y%c') like CONCAT('%',#{month,jdbcType=VARCHAR},'%')
			</if>
		  group by account_name;
	</select>
	
	<select id="listCostByCondition" resultMap="BaseResultMap"  parameterType="com.dongnao.workbench.accountflow.model.AccountFlow">
		SELECT * FROM `account_flow` 
		WHERE account_type= '2'
		AND account_name not in ('学费退款','学费调减')
		<if test="null != propsMap.startDate and propsMap.startDate != ''">
			<![CDATA[
			and DATE_FORMAT(create_date,'%Y-%c-%d') >= DATE_FORMAT(#{propsMap.startDate,jdbcType=TIMESTAMP},'%Y-%c-%d')
			]]>
		</if>
		<if test="null != propsMap.endDate and propsMap.endDate != ''">
			<![CDATA[
			and DATE_FORMAT(create_date,'%Y-%c-%d') <= DATE_FORMAT(#{propsMap.endDate,jdbcType=TIMESTAMP},'%Y-%c-%d')
			]]>
		</if>
	</select>
</mapper>
